############################################################
#
# article微服务
# web访问端口号  约定：8001
#
############################################################
server:
  port: 8001
  tomcat:
    uri-encoding: UTF-8
    max-swallow-size: -1  # tomcat默认大小2M，超过2M的文件不会被捕获，需要调整此处大小为100MB或者-1即可

############################################################
#
# 配置项目信息
#
############################################################
spring:
#  profiles:         本项目直接使用当前配置文件
#    active: dev   # yml中配置文件的环境配置，dev：开发环境，test：测试环境，prod：生产环境
  application:
    name: service-article
  datasource:                                         # 数据源的相关配置
    type: com.zaxxer.hikari.HikariDataSource          # 数据源类型：HikariCP
    driver-class-name: com.mysql.jdbc.Driver          # mysql驱动
    url: jdbc:mysql://localhost:3306/imooc_news?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true
    username: root
    password: root
    hikari:
      connection-timeout: 30000       # 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 默认:30秒
      minimum-idle: 5                 # 最小连接数
      maximum-pool-size: 20           # 最大连接数
      auto-commit: true               # 自动提交
      idle-timeout: 600000            # 连接超时的最大时长（毫秒），超时则被释放（retired），默认:10分钟
      pool-name: DateSourceHikariCP     # 连接池名字
      max-lifetime: 1800000           # 连接的生命时长（毫秒），超时而且没被使用则被释放（retired），默认:30分钟 1800000ms
      connection-test-query: SELECT 1
  redis:
    port: 6379
    database: 0  #使用redis中第几个库
    host: 127.0.0.1
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  data:
    mongodb:
      uri: mongodb://root:root@10.211.55.9:27017
      database: personal_web  #数据库的名字
  freemarker: #freemarker 相关配置
    charset: UTF-8
    content-type: text/html
    suffix: .ftl
    template-loader-path: classpath:/templates/
  rabbitmq:
    host: 10.211.55.9
    port: 5672
    username: guest
    password: guest
    virtual-host: capture
  cloud:
    stream: # 本项目stream是个demo 详见stream包 和 HelloController 没有实际应用
      bindings:                           # 绑定通道和交换机
        myOutput:                         # 定义生产者的通道
          # 自定义交换机的名字，也就是代码里构建的消息，交给底层mq的交换机
          destination: streamExchange
        myInput:                          # 定义消费者的通道
          # 自定义交换机的名字，也就是消息从底层mq输入到消费端进行消费
          destination: streamExchange
          group: boys  #使用group可以实现消息持久化
    zipkin:
      # 配置zipkin采集的服务地址，数据会发送到这里
      base-url: http://127.0.0.1:9411/
      sender:
        # 数据采集的传输通信方式，web http的形式
        type: web
    sleuth:
      sampler:
        # 数据采样比例（百分数），0~1
        probability: 0.8
############################################################
#
# mybatis 配置  mapper 配置
#
############################################################
mybatis:
  type-aliases-package: com.capture.pojo          # 所有POJO类所在包路径
  mapper-locations: classpath:mapper/*.xml      # mapper映射文件
  configuration:   # 开启mybatis的日志打印
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
# 通用 Mapper 配置
mapper:
  mappers: com.capture.my.mapper.MyMapper
  not-empty: false    # 在进行数据库操作的的时候，判断表达式 username != null, 是否追加 username != ''
  identity: MYSQL
# 分页插件配置
pagehelper:
  helperDialect: mysql
  supportMethodsArguments: true


############################################################
#  以下是springCloud 相关配置
#   eureka client 配置信息
#
############################################################
eureka:
  # 自定义eureka server的信息
  server:
    hostname: eureka
    port: 7000
  client:
    # 所有的微服务都必须注册到eureka中
    register-with-eureka: true
    # 从注册中心获得检索服务实例
    fetch-registry: true
    # 注册中心的服务地址
    service-url:
      defaultZone: http://eureka-cluster:7001/eureka/,http://eureka:7000/eureka/


# 配置指定自定义的ribbon规则 也可以在启动类打注解 默认轮询因此不做配置了
#SERVICE-USER:
#  ribbon: 负载均衡组件
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule

ribbon:
  ConnectTimeout: 50000          # 创建连接的超时时间，单位：ms
  ReadTimeout: 50000             # 在连接创建好以后，调用接口的超时时间，单位：ms
  MaxAutoRetries: 1             # 最大重试次数
  MaxAutoRetriesNextServer: 2   # 切换到下个微服务实例的重试次数
  # 当请求到某个微服务5s，超时后会进行重试，先重试连接自己当前的这个实例
  # 如果当前重试失败1次，则会切换到访问集群中的下一个微服务实例，切换最大为2次

# 配置feign  feign是声明式客户端组件 可以伪装http请求实现接口的访问 代替restTemplate
# 本项目没有用到 最初写代码时没有打算用 后期用feign改动代码太大 只用到了feign下的hystrix组件
feign:
#  client:
#    config:
#      # 配置服务提供方的名称
#      service-user:
#        loggerLevel: FULL
  hystrix: #熔断降级组件
    enabled: true   # 打开feign客户端的内置hystrix


############################################################
#
# 项目中所用到的变量配置
#
############################################################

# 设置域名，在java代码中获取，这里是资源配置
website:
  domain-name: capturez.xyz

# 定义freemarker生成的html位置
freemarker:
  html:
    target: /Users/pengfeizhang/Desktop/javaProject/PerosonalWeb/freemarker_html/ #做初次使用freemarker 测试用的路径
    article: /Users/apache-tomcat-8.5.50/webapps/imooc-news/portal/a
# 定义项目各服务地址前缀
transferInterface:
  article: http://capturez.xyz:8001/
  article_html: http://capturez.xyz:8002/
  user: http://capturez.xyz:8003/
  files: http://capturez.xyz:8004/
  admin: http://capturez.xyz:8005/


